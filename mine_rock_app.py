# -*- coding: utf-8 -*-
"""mine_rock_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10zwkYgFgggCvMlrA9RH_ZrzrRg_SRmVS
"""

pip install streamlit

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB

df = pd.read_csv('/content/Copy of sonar data.csv', header=None)

# 🎯 Preprocessing

X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values
le = LabelEncoder()
y = le.fit_transform(y)  # M = 1, R = 0

# ⚖️ Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 📏 Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 🚀 Initialize Models
models = {
    'Logistic Regression': LogisticRegression(),
    'SVM': SVC(probability=True),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Naive Bayes': GaussianNB(),
}

# 📊 Train & Evaluate Individual Models
print("📈 Model Accuracies:\n")
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    acc = accuracy_score(y_test, preds)
    print(f"{name}: {acc*100:.4f}")

# 🧠 Stacking Ensemble
estimators = [(name, model) for name, model in models.items()]
stack_model = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression())
stack_model.fit(X_train, y_train)
stack_preds = stack_model.predict(X_test)
stack_acc = accuracy_score(y_test, stack_preds)
print(f"\n🔝 Stacking Ensemble Accuracy: {stack_acc*100:.4f}")

# 🧮 Function to Predict from Input
def predict_mine_or_rock(input_data):
    input_array = np.array(input_data).reshape(1, -1)
    input_scaled = scaler.transform(input_array)
    prediction = stack_model.predict(input_scaled)
    label = le.inverse_transform(prediction)[0]
    return label

# 📝 Example: Take input from user
print("\n🔍 Enter 60 numerical sonar readings to predict Mine or Rock:")
try:
    input_str = input("Enter 60 comma-separated values (no labels):\n")
    input_list = [float(i.strip()) for i in input_str.split(',')]

    if len(input_list) != 60:
        print("⚠️ Please enter exactly 60 values.")
    else:
        result = predict_mine_or_rock(input_list)
        print(result)
        if (result[0]=='R'):
          print('The object is a Rock')
        else:
          print('The object is a mine')
except Exception as e:
    print(f"❌ Error: {e}")